testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(filt_nir_value = signal::filtfilt(filt = h, x = nir_value))
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = filt_nir_value ), linetype="dotted")
h <- signal::fir1(20, .1, "low")
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(filt_nir_value = signal::filtfilt(filt = h, x = nir_value))
head(testFiltered)
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = filt_nir_value ), linetype="dotted")
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(filt_nir_value = signal::filter(filt = h, x = nir_value))
head(testFiltered)
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = filt_nir_value ), linetype="dotted")
h <- signal::fir1(20, .1/(fs / 2), "low")
signal::freqz(h)
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(filt_nir_value = signal::filter(filt = h, x = nir_value))
head(testFiltered)
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = filt_nir_value ), linetype="dotted")
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(filt_nir_value = signal::filtfilt(filt = h, x = nir_value))
head(testFiltered)
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = filt_nir_value ), linetype="dotted")
testNirsData %>%
group_by(optode, freq) %>% fft(nir_value)
testNirsData %>%
group_by(optode, freq) %>% fft(.$nir_value)
signal::freqz(h)
gd <- grpdelay(h)
plot(gd, ylim = c(0, 40),
main = paste("(a) Group delay for FIR filters is constant\n",
"(here 40 / 2 = 20)"))
plot(gd, ylim = c(0, 40),
main = paste("(a) Group delay for FIR filters is constant\n",
"(here 40 / 2 = 20)"))
gd <- grpdelay(h)
plot(gd, ylim = c(0, 40),
main = paste("(a) Group delay for FIR filters is constant\n",
"(here 40 / 2 = 20)"))
delay <- mean(gd$gd)
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filtfilt(filt = h, x = nir_value))
testFiltered %>%
group_by(optode, freq) %>%
mutate(nir_filt_comp = c(nir_filt[(delay + 1):npts], rep(NA, delay + 1)))
npts <- nrow(testNirsData$nir_value)
testFiltered %>%
group_by(optode, freq) %>%
mutate(nir_filt_comp = c(nir_filt[(delay + 1):npts], rep(NA, delay + 1)))
testFiltered
testFiltered %>%
group_by(optode, freq)
npts <- nrow(testNirsData$nir_value)
npts <- length(testNirsData$nir_value)
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filtfilt(filt = h, x = nir_value))
testFiltered %>%
group_by(optode, freq) %>%
mutate(nir_filt_comp = c(nir_filt[(delay + 1):npts], rep(NA, delay + 1)))
npts <- length(testFiltered$nir_value)
testFiltered %>%
group_by(optode, freq) %>%
mutate(nir_filt_comp = c(nir_filt[(delay + 1):npts], rep(NA, delay + 1)))
npts <- nrow(testFiltered$nir_value)
nrow(testFiltered$nir_value)
npts <- nrow(testFiltered)
testFiltered %>%
group_by(optode, freq) %>%
mutate(nir_filt_comp = c(nir_filt[(delay + 1):npts], rep(NA, delay + 1)))
mutate(nir_filt_comp = c(nir_filt[(delay + 1):lengh(nir_value)], rep(NA, delay + 1)))
mutate(nir_filt_comp = c(nir_filt[(delay + 1):lengh(nir_value)], rep(NA, delay + 1)))
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filtfilt(filt = h, x = nir_value))
mutate(nir_filt_comp = c(nir_filt[(delay + 1):lengh(nir_value)], rep(NA, delay + 1)))
View(testFiltered)
mutate(nir_filt_comp = c(.$nir_filt[(delay + 1):lengh(.$nir_value)], rep(NA, delay + 1)))
delay
signal::freqz(h)
h <- signal::fir1(20, .1, "low")
signal::freqz(h)
h <- signal::fir1(20, .1, "low")
signal::freqz(h)
h <- signal::fir1(10, .1, "low")
signal::freqz(h)
h <- signal::fir1(20, .1, "low")
signal::freqz(h)
gd <- grpdelay(h)
delay <- mean(gd$gd)
delay
testNirsData <- nirsData$p2 %>% as.data.frame()
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filtfilt(filt = h, x = nir_value))
npts <- nrow(testFiltered)
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = filt_nir_value ), linetype="dotted")
p + geom_line(aes(y = nir_filt ), linetype="dotted")
testFiltered %>% dplyr::filter(t == 500)
testFiltered %>% dplyr::filter(t >= 1 & t <=2)
testFiltered %>% dplyr::filter(t >= 100 & t <=110)
testFiltered %>% dplyr::filter(t >= 100 & t <=110) %>% summarise(dif = nir_vale - nir_filt)
testFiltered %>% dplyr::filter(t >= 100 & t <=110) %>% summarise(dif = nir_value - nir_filt)
testFiltered %>% dplyr::filter(t >= 100 & t <=110) %>% summarise(dif = mean(nir_value - nir_filt))
h <- signal::fir1(20, 1, "low")
signal::freqz(h)
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filtfilt(filt = h, x = nir_value))
head(testFiltered)
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = nir_filt ), linetype="dotted")
testFiltered %>% dplyr::filter(t >= 100 & t <=110) %>% summarise(dif = mean(nir_value - nir_filt))
ggplotly(p + geom_line(aes(y = filt_nir_value ), linetype="dotted"))
ggplotly(p + geom_line(aes(y = nir_filt ), linetype="dotted"))
h <- signal::butter(20, .1, "low")
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filtfilt(filt = h, x = nir_value))
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = nir_filt ), linetype="dotted")
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
mutate(nir_filt = signal::filter(filt = h, x = nir_value))
p<- testFiltered %>% dplyr::filter(optode ==1) %>%
ggplot(aes(x = t, color = freq)) +
geom_line(aes(y=nir_value), alpha =0.2)
p
p + geom_line(aes(y = nir_filt ), linetype="dotted")
h <- signal::fir1(20, .1, "low")
signal::freqz(h)
h <- signal::fir1(40, .1, "low")
signal::freqz(h)
h <- signal::fir1(20, .1, "low")
signal::freqz(h)
testNirsData <- nirsData$p2 %>% as.data.frame()
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
fft(nir_value)
testFiltered <- testNirsData %>%
group_by(optode, freq) %>%
fft(.$nir_value)
testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value)
testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value) %>%
fft()
testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value) %>%
as.numeric() %>%
fft()
testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value) %>%
as.numeric()
testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value) %>%
unlist()
testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value)
test1 <- estNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value)
test1 <- testNirsData %>%
dplyr::filter(optode ==1 & freq == 730) %>%
select(nir_value)
fft(test1)
fft(test1$nir_value)
gsignal::zfreq(fft(test1$nir_value))
gsignal::freqz(fft(test1$nir_value))
gsignal::plot(fft(test1$nir_value))
plot(fft(test1$nir_value))
plot(fft(abs(test1$nir_value)))
nirsData$p2 %>%
dplyr::filter(freq = c(730,850))
nirsData$p2 %>%
dplyr::filter(freq == c(730,850))
nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode)
testDataPython <-  nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode)
reticulate::repl_python()
test_dods <- py$dod
test_dods <- reticulate::py$dod
readNirFile <- function(nirFileName){
library(tidyverse)
library(janitor)
fullNirPath <- paste(myPath,nirFileName, sep = "")
nir1 <- readLines(fullNirPath,   skipNul = TRUE) # read in the nirFile - this is required
fullMrkPath <- paste(myPath,str_sub(nirFileName, 1, nchar(nirFileName)-4),".mrk", sep = "")  # name the marker file. If it exists, it should have exact same name as nir file
nir1 <- nir1 %>% as.tibble(nir1) #make the nirs data a tibble for easier manipulation
start_time <- nir1 %>%
filter(str_detect(.$value, "Start Time:")) %>% substring(., 17)
start_time <- as.POSIXct(start_time, format = "%b %d %H:%M:%S %Y")
nir1 <- nir1 %>%
mutate(startTime = start_time)
nir1 <- mutate(nir1, id = row_number()) # this is the row number of the data as it is in the original file. Later we will create "data_row" to identify the beginning of data collection from the end of baseline, according to COBI studio
nir1 <- nir1 %>% mutate(fileName = nirFileName)
# Get the baseline data from the file (the default COBI Studio baseline)
bStartRow <-  nir1 %>% filter(str_detect(.$value, 'Baseline values')) %>% select(id)
bEndRow <- nir1 %>% filter(str_detect(.$value, 'Baseline end')) %>% select(id)
baselineNirsValues <- nir1 %>% filter(id > bStartRow$id & id < bEndRow$id)
baselineNirsValues <- separate(baselineNirsValues, col = value, sep = "\t", into = c("t", "op_1_730","op_1_ambient","op_1_850","op_2_730","op_2_ambient","op_2_850","op_3_730","op_3_ambient","op_3_850","op_4_730","op_4_ambient","op_4_850", "op_5_730","op_5_ambient","op_5_850", "op_6_730","op_6_ambient","op_6_850", "op_7_730","op_7_ambient","op_7_850", "op_8_730","op_8_ambient","op_8_850","op_9_730","op_9_ambient","op_9_850","op_10_730","op_10_ambient","op_10_850","op_11_730","op_11_ambient","op_11_850","op_12_730","op_12_ambient","op_12_850","op_13_730","op_13_ambient","op_13_850","op_14_730","op_14_ambient","op_14_850","op_15_730","op_15_ambient","op_15_850","op_16_730","op_16_ambient","op_16_850"), extra = "merge")
## < baseline data (the default COBI Studio baseline)  have now been stored as: baselineNirsValues
# store all of the nirs data values from the end of the default baseline until the end of the experiment
nirsEndRow <-  nir1 %>% filter(str_detect(.$value, '-1	Device Stopped')) %>% select(id)
nirsDataValues <- nir1 %>% filter(id > bEndRow$id & id < nirsEndRow$id)
## < nirs data have now been stored as: nirsDataValues
# now orgnaise the nirs data into a data frame that we can use, with each datapoint labelled with optode, frequency etc.
# get the start time of the nirs recording:
# start_time <- nir1 %>%
#   filter(str_detect(.$value, "Start Time:")) %>% substring(., 17)
#
# start_time <- as.POSIXct(start_time, format = "%b %d %H:%M:%S %Y")
#
#
# separate nirs data columns
# first column is time from start in seconds
nirsDataValues <- separate(nirsDataValues, col = value, sep = "\t", into = c("t", "op_1_730","op_1_ambient","op_1_850","op_2_730","op_2_ambient","op_2_850","op_3_730","op_3_ambient","op_3_850","op_4_730","op_4_ambient","op_4_850", "op_5_730","op_5_ambient","op_5_850", "op_6_730","op_6_ambient","op_6_850", "op_7_730","op_7_ambient","op_7_850", "op_8_730","op_8_ambient","op_8_850","op_9_730","op_9_ambient","op_9_850","op_10_730","op_10_ambient","op_10_850","op_11_730","op_11_ambient","op_11_850","op_12_730","op_12_ambient","op_12_850","op_13_730","op_13_ambient","op_13_850","op_14_730","op_14_ambient","op_14_850","op_15_730","op_15_ambient","op_15_850","op_16_730","op_16_ambient","op_16_850"), extra = "merge")
# create a new column called data_row to match the 3rd column in the markers file that explicitly states which row/line in the nirs file a marker is related to. This marker row information seems to start after the baseline, so the first row of nirsDataValues is equivalent to the first row as far as the marker file is concerned.
nirsDataValues <- mutate(nirsDataValues, data_row = row_number())
# change the data from wide to long format. This will make analysis easier
nirs_long <- nirsDataValues %>%
pivot_longer(
cols = op_1_730:op_16_850,
names_to = c("optode", "freq"),
names_pattern = "op_(.*)_(.*)",
values_to = "nir_value"
)
baseline_long <- baselineNirsValues %>%
pivot_longer(
cols = op_1_730:op_16_850,
names_to = c("optode", "freq"),
names_pattern = "op_(.*)_(.*)",
values_to = "baseline_value"
)
nirs_long <- baseline_long %>%
select(optode, freq, baseline_value) %>%
right_join(nirs_long)
# add the start time to the data
# nirs_long <- mutate(nirs_long, start_time = start_time)
# marker file data will be added to nirs data if it exists. Otherwise nirs data will be returned without markers
# first, the marker file needs to be read and organised
if (file.exists(fullMrkPath)){ mrk1 <- read_lines(fullMrkPath)
mrk1 <- mrk1 %>% as.tibble(mrk1)
mrk1 <- mutate(mrk1, id = row_number()) # overall row number is added to the file data. This helps to identify when the data actually begins in the file
# getting the actual marker data
mStartRow <-  mrk1 %>% filter(str_detect(.$value, 'Freq Code:')) %>% select(id)
markerValues <- mrk1 %>% filter(id > mStartRow$id & id <= max(id))
# organising the marker data and adding the data_row column to match with the same column in the nirs_data
markerValues <- separate(markerValues, col = value, sep = "\t", into = c("t","marker", "data_row"), extra = "merge")
markerValues$data_row <- as.integer(markerValues$data_row)
## add markers to nirsdata
mrk2 <- markerValues %>% select(data_row, marker)
nirsData <- left_join(nirs_long, mrk2, by = "data_row")
nirsData$marker <- as.factor(nirsData$marker)
} else {
# if there is no maker data, just return the nirs_data without it
nirsData <- nirs_long
paste("can't find:")
paste(fullMrkPath)
}
## do some variable type corrections
nirsData$nir_value <- as.numeric(nirsData$nir_value)
nirsData$t <- as.numeric(nirsData$t)
nirsData$freq <- as.factor(nirsData$freq)
nirsData <- nirsData %>% ungroup()
nirsData
}
myPath <- "~/OneDrive - Teesside University/Research/Financial Decision Research/fin_dec_paper/Analysis/experiment_3/fnirs_data/"
addBrodmanns <- function(nirsData) {
data <-  nirsData %>% mutate(hemi = ifelse(optode < 9, "left", "right"))
data <- data %>% mutate(region = case_when((optode == 1 | optode == 15) ~ "BA44",
(optode == 2 | optode == 16) ~ "BA45",
(optode == 3 | optode == 4 | optode == 13 | optode == 14) ~ "BA46",
(optode == 5 | optode == 6 | optode == 7 | optode == 8 | optode == 9 | optode == 10 | optode == 11 | optode == 12 ) ~ "BA10",
))
data
}
# list all of the nirs files in a directory
nirsFiles <- list.files(pattern = ".nir$", recursive = TRUE, path = myPath)
pids <- nirsFiles %>% str_sub(., 13, 14) %>% gsub("[^0-9.-]", "", .) %>% as.numeric()
#myPath <- "C:/Users/wilso/OneDrive - Teesside University/Research/Financial Decision Research/fin_dec_paper/Analysis/experiment_3/fnirs_data/"
library(tidyverse)
pids <- nirsFiles %>% str_sub(., 13, 14) %>% gsub("[^0-9.-]", "", .) %>% as.numeric()
# list all of the marker files in a directory
mrkFiles <- list.files(pattern = ".mrk$", recursive = TRUE, path = myPath)
# base the number of participants on the number of files in the directory
nparticipants <- length(nirsFiles)
# apply the earlier function to read in all of the nirs files in the directory and add markers if they exist
nirsData <- lapply(nirsFiles, FUN = readNirFile)
# add a participant id to each starting with p1 to p (number of participants)
names(nirsData) <- c(paste("p",pids, sep = ""))
# add the participant id to each of the dataframes in the larger dataset, so analysis can be done for each participant and linked to behavioural data later
nirsData <- mapply(`[<-`, nirsData, 'npid', value = pids, SIMPLIFY = FALSE)
testDataPython <-  nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode)
testDataPython$optode <- as.factor(testDataPython$optode)
testDataPython <- subset(testDataPython, select=-c(3,5))
testDataPython <-  nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode)
testDataPython <- testDataPython %>%
group_by(optode) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = optode, values_from = nir_value) %>%
select(-row)
testDataPython <- subset(testDataPython, select=-c(3,5))
reticulate::repl_python()
test_dods <- reticulate::py$dod
View(test_dods)
reticulate::repl_python()
R.matlab::readMat(file_path)
file_path <- "/Users/chris/Documents/GitHub/NIRSimple/SampleData/SampleData/Example1_Simple_Probe/Simple_Probe"
R.matlab::readMat(file_path)
reticulate::repl_python()
file_path <- "/Users/chris/Documents/GitHub/NIRSimple/SampleData/SampleData/Example1_Simple_Probe/Simple_Probe/simple_probe.nirs"
R.matlab::readMat(file_path)
file_path <- "/Users/chris/Documents/GitHub/NIRSimple/SampleData/SampleData/Example1_Simple_Probe/Simple_Probe/simple_probe.mat"
R.matlab::readMat(file_path)
file_path <- "/Users/chris/Documents/GitHub/NIRSimple/SampleData/SampleData/Example1_Simple_Probe/Simple_Probe/Simple_Probe.mat"
R.matlab::readMat(file_path)
setwd("~/Documents/GitHub/NIRSimple/SampleData/SampleData/Example1_Simple_Probe")
sampleData <- readMat("Simple_Probe.mat")
sampleData <- r.matlab::readMat("Simple_Probe.mat")
sampleData <- R.matlab::readMat("Simple_Probe.mat")
reticulate::repl_python()
testDataPython <-  nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode)
testDataPython$optode <- as.factor(testDataPython$optode)
testDataPython <- testDataPython %>%
group_by(optode) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = c(optode_freq), values_from = nir_value) %>%
select(-row)
testDataPython <- testDataPython %>%
group_by(optode) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = c(optode,freq), values_from = nir_value) %>%
select(-row)
testDataPython <-  nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode, freq)
testDataPython$optode <- as.factor(testDataPython$optode)
testDataPython <- testDataPython %>%
group_by(optode) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = c(optode,freq), values_from = nir_value) %>%
select(-row)
testDataPython <- subset(testDataPython, select=-c(3,5))
testDataPython <- subset(testDataPython, select=-c(3_850,3_730,5_850,5_730))
testDataPython <- subset(testDataPython, select=-c("3_850","3_730","5_850","5_730"))
testDataPython <-  nirsData$p2 %>%
dplyr::filter(freq == c(730,850)) %>%
select(nir_value, optode, freq)
testDataPython$optode <- as.factor(testDataPython$optode)
testDataPython <- testDataPython %>%
group_by(optode) %>%
mutate(row = row_number()) %>%
pivot_wider(names_from = c(optode,freq), values_from = nir_value) %>%
select(-row)
testDataPython <- subset(testDataPython, select=-c(5,6,9,10))
reticulate::repl_python()
channelNames <- colnames(testDataPython)
reticulate::repl_python()
if (baseline == "ref")  {
#Converts intensities into optical density changes. Changes are relative
# to the average intensity or a reference intensity for each channel.
#Optical density from light intensity:
# deltaOD = -log10(I_t/IRef)
delta_od_730 <- nirsData %>% filter(freq == "850") %>% group_by(optode) %>% summarise(delta_od_850 = -log10(abs(as.numeric(nir_value)) / abs(as.numeric(baseline_value))), t = t, data_row = data_row, marker = marker, pid = pid  ) %>% ungroup()
delta_od_850 <- nirsData %>% filter(freq == "730") %>% group_by(optode) %>% summarise(delta_od_730 = -log10(abs(as.numeric(nir_value)) /abs(as.numeric(baseline_value))), t = t, data_row = data_row, marker = marker, pid = pid   ) %>% ungroup()
delta_od_all <- left_join(delta_od_730,delta_od_850)
} else {
# if there is no reference baseline, or if we don't want to use that right now, we can use the averge of all of the nirs values as a reference.
# FROM NIRSIMPLE: delta_OD = -log10(I_t/I_average)
# Creating delta od values for each optode at the same time as calculating mean and then joining the two frequency values together
nirsData$nir_value <- as.numeric(nir_value)
nirsData <- nirsData %>%
group_by(optode, freq) %>%
mutate(channelMean = mean(abs(nir_value)))
delta_od_730 <- nirsData %>% filter(freq == "850") %>% group_by(optode) %>% summarise(delta_od_850 = -log10(abs(nir_value) / channelMean), t = t, data_row = data_row, marker = marker, pid = pid  ) %>% ungroup()
delta_od_850 <- nirsData %>% filter(freq == "730") %>% group_by(optode) %>% summarise(delta_od_730 = -log10(abs(nir_value) / channelMean), t = t, data_row = data_row, marker = marker, pid = pid   ) %>% ungroup()
delta_od_all <- left_join(delta_od_730,delta_od_850)
}
createDeltaOds <- function(nirsData, baseline = "avg"){
if (baseline == "ref")  {
#Converts intensities into optical density changes. Changes are relative
# to the average intensity or a reference intensity for each channel.
#Optical density from light intensity:
# deltaOD = -log10(I_t/IRef)
delta_od_730 <- nirsData %>% filter(freq == "850") %>% group_by(optode) %>% summarise(delta_od_850 = -log10(abs(as.numeric(nir_value)) / abs(as.numeric(baseline_value))), t = t, data_row = data_row, marker = marker, pid = pid  ) %>% ungroup()
delta_od_850 <- nirsData %>% filter(freq == "730") %>% group_by(optode) %>% summarise(delta_od_730 = -log10(abs(as.numeric(nir_value)) /abs(as.numeric(baseline_value))), t = t, data_row = data_row, marker = marker, pid = pid   ) %>% ungroup()
delta_od_all <- left_join(delta_od_730,delta_od_850)
} else {
# if there is no reference baseline, or if we don't want to use that right now, we can use the averge of all of the nirs values as a reference.
# FROM NIRSIMPLE: delta_OD = -log10(I_t/I_average)
# Creating delta od values for each optode at the same time as calculating mean and then joining the two frequency values together
nirsData$nir_value <- as.numeric(nir_value)
nirsData <- nirsData %>%
group_by(optode, freq) %>%
mutate(channelMean = mean(abs(nir_value)))
delta_od_730 <- nirsData %>% filter(freq == "850") %>% group_by(optode) %>% summarise(delta_od_850 = -log10(abs(nir_value) / channelMean), t = t, data_row = data_row, marker = marker, pid = pid  ) %>% ungroup()
delta_od_850 <- nirsData %>% filter(freq == "730") %>% group_by(optode) %>% summarise(delta_od_730 = -log10(abs(nir_value) / channelMean), t = t, data_row = data_row, marker = marker, pid = pid   ) %>% ungroup()
delta_od_all <- left_join(delta_od_730,delta_od_850)
}
delta_od_all
}
View(createDeltaOds)
View(createDeltaOds)
## Apply MBLL law to nirs data
delta_od_mean <- lapply(nirsData, createDeltaOds)
createDeltaOds <- function(nirsData, baseline = "avg"){
if (baseline == "ref")  {
#Converts intensities into optical density changes. Changes are relative
# to the average intensity or a reference intensity for each channel.
#Optical density from light intensity:
# deltaOD = -log10(I_t/IRef)
delta_od_730 <- nirsData %>% filter(freq == "850") %>% group_by(optode) %>% summarise(delta_od_850 = -log10(abs(as.numeric(nir_value)) / abs(as.numeric(baseline_value))), t = t, data_row = data_row, marker = marker, pid = pid  ) %>% ungroup()
delta_od_850 <- nirsData %>% filter(freq == "730") %>% group_by(optode) %>% summarise(delta_od_730 = -log10(abs(as.numeric(nir_value)) /abs(as.numeric(baseline_value))), t = t, data_row = data_row, marker = marker, pid = pid   ) %>% ungroup()
delta_od_all <- left_join(delta_od_730,delta_od_850)
} else {
# if there is no reference baseline, or if we don't want to use that right now, we can use the averge of all of the nirs values as a reference.
# FROM NIRSIMPLE: delta_OD = -log10(I_t/I_average)
# Creating delta od values for each optode at the same time as calculating mean and then joining the two frequency values together
nirsData$nir_value <- as.numeric(nirsData$nir_value)
nirsData <- nirsData %>%
group_by(optode, freq) %>%
mutate(channelMean = mean(abs(nir_value)))
delta_od_730 <- nirsData %>% filter(freq == "850") %>% group_by(optode) %>% summarise(delta_od_850 = -log10(abs(nir_value) / channelMean), t = t, data_row = data_row, marker = marker, pid = pid  ) %>% ungroup()
delta_od_850 <- nirsData %>% filter(freq == "730") %>% group_by(optode) %>% summarise(delta_od_730 = -log10(abs(nir_value) / channelMean), t = t, data_row = data_row, marker = marker, pid = pid   ) %>% ungroup()
delta_od_all <- left_join(delta_od_730,delta_od_850)
}
delta_od_all
}
## Apply MBLL law to nirs data
delta_od_mean <- lapply(nirsData, createDeltaOds)
delta_od_mean$p2
View(test_dods)
compdod <- delta_od_mean$p2 %>% filter(optode == 1) %>% select(delta_od_730) %>% as.data.frame()
test_dods[,1] - compdod
test_dods[,1] - compdod
test_dods
compdod
head(compdod)
reticulate::repl_python()
## Apply MBLL law to nirs data
delta_od_mean <- lapply(nirsData, createDeltaOds)
nirsData <- within(nirsData, rm(p13))
nirsData <- within(nirsData, rm(p3))
nirsData <- within(nirsData, rm(p6))
nirsData <- within(nirsData, rm(p5))
## Apply MBLL law to nirs data
delta_od_mean <- lapply(nirsData, createDeltaOds)
delta_od_ref <- lapply(nirsData, createDeltaOds, baseline = "ref")
oxyData_ref <- lapply(delta_od_ref, applyMBLL)
View(oxyData_ref)
oxytest_ref_plot<- oxyData_test_ref %>%
filter(!optode %in% c(2,3,5)) %>%
ggplot(aes(x = t)) +
# geom_point(aes(shape = ".", alpha = 0.05)) +
geom_line(aes(y = hbo )) +
geom_line(aes(y = hbr )) +
facet_wrap(.~optode)
library(plotly)
ggplotly(oxytest_ref_plot)
testDataPython <- t(testDataPython)
reticulate::repl_python()
